{
  "kowalskiWelcome": "*Hello! I am Kowalski!*\nI was made with love by some nerds who really love programming!\n\n*Before using, you need to read the privacy policy (/privacy) to understand where your data goes when using this bot.*\n\nAlso, you can use /help to see the bot commands!\n\n*Special thanks to @givfnz2 for his many contributions to the bot!*",
  "kowalskiHelp": "*Hey, I'm Kowalski, a simple bot made entirely from scratch in Telegraf and Node.js by some nerds who really love programming.*\n\nClick on the buttons below to see which commands you can use!\n",
  "kowalskiPrivacy": "Check out [this link](https://blog.lucmsilva.com/posts/lynx-privacy-policy) to read the bot's privacy policy.",
  "kowalskiAbout": "*About the bot*\n\nKowalski was originally created by [Lucas Gabriel (lucmsilva)](https://github.com/lucmsilva651), now maintained by several people.\n\nThe bot's purpose is to bring fun to your groups here on Telegram in a relaxed and simple way. The bot also features some very useful commands, which you can see using the help command (/help).\n\nSee the source code: [Click here to go to GitHub](https://github.com/abocn/TelegramBot)",
  "aboutBot": "About the bot",
  "unKnown": "Unknown",
  "varYes": "Yes",
  "varNo": "No",
  "varTo": "to",
  "varIs": "is",
  "varWas": "was",
  "varNone": "None",
  "invalidOption": "Whoops! Invalid option!",
  "kickingMyself": "*Since you don't need me, I'll leave.*",
  "kickingMyselfErr": "Error leaving the chat.",
  "noPermission": "You don't have permission to run this command.",
  "botAdminOnly": "This command is exclusive to the bot's general administrators. I can't disclose who they are, nor what this command does.",
  "privateOnly": "This command should only be used in private chats, not in groups.",
  "groupOnly": "This command should only be used in groups, not in private chats.",
  "botNameChanged": "*Bot name changed to* `{botName}`.",
  "botNameErr": "*Error changing bot name:*\n`{tgErr}`",
  "botDescChanged": "*Bot description changed to* `{botDesc}`.",
  "botDescErr": "*Error changing bot description:*\n`{tgErr}`",
  "invalidId": "Please enter a valid user ID.",
  "banSuccess": "User with ID `{userId}` has been banned.",
  "banErr": "Could not ban the user. Check if the ID is correct and if the bot has admin permissions.\n\n`{tgErr}`",
  "unBanSuccess": "User with ID `{userId}` has been unbanned.",
  "unBanErr": "Could not unban the user. Check if the ID is correct and if the bot has admin permissions.\n\n`{tgErr}`",
  "error": "An unexpected error occured. Please, report to the developers.",
  "isGay": "Yes, you are *gay*!",
  "isNtGay": "Ah, you are not gay!",
  "isFurry": "Yes, you are *furry*!",
  "isNtFurry": "Ah, you are not a furry!",
  "randomNum": "*Generated number (0-10):* `{number}`.",
  "userInfo": "*User info*\n\n*Name:* `{userName}`\n*Username:* `{userHandle}`\n*User ID:* `{userId}`\n*Language:* `{userLang}`\n*Premium user:* `{userPremium}`",
  "chatInfo": "*Chat info*\n\n*Name:* `{chatName}`\n*Chat ID:* `{chatId}`\n*Handle:* `{chatHandle}`\n*Type:* `{chatType}`\n*Members:* `{chatMembersCount}`\n*Is a forum:* `{isForum}`",
  "funEmojiResult": "*You rolled {emoji} and got* `{value}`*!*\nYou don't know what that means? Me neither!",
  "gifErr": "*Something went wrong while sending the GIF. Please try again later.*\n\n{err}",
  "lastFmNoUser": "*Please provide a Last.fm username.*\nExample: `/setuser <username>`",
  "lastFmNoSet": "*You haven't set your Last.fm username yet.*\nUse the command /setuser to set.\n\nExample: `/setuser <username>`",
  "lastFmNoRecent": "*No recent tracks found for Last.fm user* `{lastfmUser}`*.*",
  "lastFmUserSet": "*Your Last.fm username has been set to:* `{lastUser}`.",
  "lastFmStatusFor": "{lastfmUser} *{nowPlaying} listening {playCount}*:\n\n{trackName} by {artistName}",
  "lastFmPlayCount": "by the {plays}th time",
  "lastFmErr": "*Error retrieving data for Last.fm user* {lastfmUser}.\n\n`{err}`",
  "currentCommit": "*Current commit:* `{commitHash}`",
  "errorRetrievingCommit": "*Error retrieving commit:* {error}",
  "provideLocation": "*Please provide a location.*",
  "invalidLocation": "*Invalid location. Try again.*",
  "weatherStatus": "*Weather in {addressFirst}:*\n\n*Status:* `{getStatusEmoji(iconCode)} {wxPhraseLong}`\n*Temperature:* `{temperature} °{temperatureUnit}`\n*Feels like:* `{temperatureFeelsLike} °{temperatureUnit2}`\n*Humidity:* `{relativeHumidity}%`\n*Wind speed:* `{windSpeed} {speedUnit}`",
  "weatherErr": "*An error occurred while retrieving the weather. Please try again later.*\n\n`{error}`",
  "mainCommands": "Main commands",
  "mainCommandsDesc": "*Main commands*\n\n- /help: Show bot's help\n- /start: Start the bot\n- /privacy: Read the bot's Privacy Policy",
  "usefulCommands": "Useful commands",
  "usefulCommandsDesc": "*Useful commands*\n\n- /chatinfo: Send information about the group\n- /userinfo: Send information about yourself\n- /d | /device `<model>`: Search for a device on GSMArena and show its specs.\n- /weather | /clima `<city>`: See weather status for a specific location.\n- /modarchive | /tma `<module id>`: Download a module from The Mod Archive.\n- /wiki `<wiki page>` (WIP): Displays content from a Wikipedia page, converting some things to a more familiar format on Telegram.\n- /http `<HTTP code>`: Send details about a specific HTTP code. Example: `/http 404`",
  "funnyCommands": "Funny commands",
  "funnyCommandsDesc": "*Funny commands*\n\n- /gay: Check if you are gay\n- /furry: Check if you are a furry\n- /random: Pick a random number between 0-10",
  "interactiveEmojis": "Interactive emojis",
  "interactiveEmojisDesc": "*Interactive emojis*\n\n- /dice: Roll a dice\n- /idice: Infinitely roll a colored dice\n- /slot: Try to combine the figures!\n- /ball: Try to kick the ball into the goal!\n- /bowling: Try to hit the pins!\n- /dart: Try to hit the target!",
  "ytDlp": "yt-dlp (YouTube)",
  "ytDlpDesc": "*yt-dlp (YouTube)*\n\n- /yt | /ytdl `<video link>`: Download an YouTube video\n\nThis command also works with other video platforms! See [this link](https://github.com/yt-dlp/yt-dlp/blob/master/supportedsites.md) for more information and which services are supported.\n\n*Note: Telegram is currently limiting bot uploads to 50MB, which means that if the video you want to download is larger than 50MB, the quality will be reduced to try to upload it anyway. We're trying our best to work around or fix this problem.*",
  "lastFm": "Last.fm",
  "lastFmDesc": "*Last.fm*\n\n- /lt | /lmu | /last | /lfm: Shows the last song from your Last.fm profile + the number of plays.\n- /setuser `<user>`: Sets the user for the command above.",
  "animalCommands": "Animals",
  "animalCommandsDesc": "*Animals*\n\n- /soggy `<1 | 2 | 3 | 4 | orig | thumb | sticker | alt>`: Sends the [Soggy cat meme](https://knowyourmeme.com/memes/soggy-cat)\n - /cat `<tags>`: Sends a random picture of a cat. You can specify some tags, separating each by a comma. Example: `/cat orange, cute`\n- /dog: Sends a random picture of a dog.\n- /httpcat `<http code>`: Send cat memes from http.cat with your specified HTTP code. Example: `/httpcat 404`",
  "myLittlePony": "My Little Pony",
  "myLittlePonyDesc": "*My Little Pony*\n\n- /mlp: Displays this help message.\n- /mlpchar `<character name>`: Shows specific information about a My Little Pony character. Example: `/mlpchar twilight`\n- /mlpep: Shows specific information about a My Little Pony episode. Example: `/mlpep 136`",
  "goBack": "Back",
  "maInvalidModule": "Please provide a valid module ID from The Mod Archive.\nExample: `/modarchive 81574`",
  "maDownloadError": "Error downloading the file. Check the module ID and try again.",
  "ytDownloading": "*Downloading video...*",
  "ytFileErr": "*It seems that the yt-dlp executable does not exist on our server...\n\nIn that case, the problem is on our end! Please wait until we have noticed and solved the problem.*",
  "ytCheckingSize": "*Checking if the video exceeds the 50MB limit...*",
  "ytUploading": "*Uploading video...*",
  "ytUploadDesc": "*[{userName}](tg://user?id={userId}), there is your downloaded video.*",
  "ytDownloadErr": "*Error during YT video download:*\n\n`{err}`",
  "ytUploadLimit": "*This video exceeds the 50 MB upload limit imposed by Telegram on our bot. Please try another video. We're doing our best to increase this limit.*",
  "ytUploadLimit2": "*This video had its quality reduced because it exceeded the 50MB limit for uploads imposed by Telegram.*",
  "fileError": "Error uploading file",
  "botUpdated": "Bot updated with success.\n\n```{result}```",
  "errorUpdatingBot": "Error updating bot\n\n{error}",
  "catImgErr": "Sorry, but I couldn't get the cat photo you wanted.",
  "catGifErr": "Sorry, but I couldn't get the cat GIF you wanted.",
  "quoteResult": "Here is a random quote for you:",
  "quoteErr": "Sorry, but something went wrong while displaying the quote.",
  "dogImgErr": "Sorry, but I couldn't get the dog photo you wanted.",
  "httpCodeInvalid": "Please enter a valid HTTP code.",
  "httpCodeErr": "An error occurred while fetching the HTTP code.",
  "httpCodeNotFound": "HTTP code not found.",
  "httpCodeResult": "*HTTP Code*: {code}\n*Name*: `{message}`\n*Description*: {description}",
  "ponyApiCharRes": "*MLP Character Information for* \"`{input}`\"*:*\n\n*Name:* `{name}`\n*Alias*: `{alias}`\n*Fandom URL:* [{url}]({url})\n*Sex:* `{sex}`\n*Residence:* `{residence}`\n*Occupation:* `{occupation}`\n*Kind:* `{kind}`",
  "ponyApiEpRes": "*MLP Episode Information for* \"`{input}`\"*:*\n\n*Name:* `{name}`\n*Fandom URL:* [{url}]({url})\n*Season:* `{season}`\n*Episode:* `{episode}`\n*Overall Ep.:* `{overall}`\n*Release date:* `{airdate}`\n*Story by:* `{storyby}`\n*Written by:* `{writtenby}`\n*Storyboard:* `{storyboard}`",
  "ponyApiComicRes": "*MLP Comic Information for* \"`{input}`\"*:*\n\n*Name:* `{name}`\n*Fandom URL:* [{url}]({url})\n*Series:* `{series}`\n*Writer:* `{writer}`\n*Artist:* `{artist}`\n*Colorist:* `{colorist}`\n*Letterer:* `{letterer}`\n*Editor:* `{editor}`",
  "ponyApiNoCharName": "Please provide the character's name.",
  "ponyApiNoCharFound": "No character found.",
  "ponyApiNoEpisodeNum": "Please provide the episode's number.",
  "ponyApiNoEpisodeFound": "No episode found.",
  "ponyApiNoComicName": "Please provide the comic's name.",
  "ponyApiNoComicFound": "No comic found.",
  "ponyApiErr": "An error occurred while fetching data from the API."
}